Server {
      nsps: { '/': [Circular] },
      parentNsps: Map {},
      _path: '/socket.io',
      _serveClient: true,
      parser:
       { protocol: 4,
         types: [Array],
         CONNECT: 0,
         DISCONNECT: 1,
         EVENT: 2,
         ACK: 3,
         ERROR: 4,
         BINARY_EVENT: 5,
         BINARY_ACK: 6,
         Encoder: [Function: Encoder],
         Decoder: [Function: Decoder] },
      encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
      sockets: [Circular],
      eio:
       Server {
         clients: [Object],
         clientsCount: 3,
         wsEngine: 'ws',
         pingTimeout: 5000,
         pingInterval: 25000,
         upgradeTimeout: 10000,
         maxHttpBufferSize: 100000000,
         transports: [Array],
         allowUpgrades: true,
         allowRequest: [Function: bound ],
         cookie: 'io',
         cookiePath: '/',
         cookieHttpOnly: true,
         perMessageDeflate: [Object],
         httpCompression: [Object],
         initialPacket: [Array],
         ws: [Object],
         _events: [Object],
         _eventsCount: 1 },
      httpServer:
       Server {
         domain: null,
         _events: [Object],
         _eventsCount: 5,
         _maxListeners: undefined,
         _connections: 5,
         _handle: [Object],
         _usingSlaves: false,
         _slaves: [],
         _unref: false,
         allowHalfOpen: true,
         pauseOnConnect: false,
         httpAllowHalfOpen: false,
         timeout: 120000,
         keepAliveTimeout: 5000,
         _pendingResponseData: 0,
         maxHeadersCount: null,
         _connectionKey: '6::::5000',
         [Symbol(asyncId)]: 11 },
      engine:
       Server {
         clients: [Object],
         clientsCount: 3,
         wsEngine: 'ws',
         pingTimeout: 5000,
         pingInterval: 25000,
         upgradeTimeout: 10000,
         maxHttpBufferSize: 100000000,
         transports: [Array],
         allowUpgrades: true,
         allowRequest: [Function: bound ],
         cookie: 'io',
         cookiePath: '/',
         cookieHttpOnly: true,
         perMessageDeflate: [Object],
         httpCompression: [Object],
         initialPacket: [Array],
         ws: [Object],
         _events: [Object],
         _eventsCount: 1 } },
   sockets:
    { 'fuZShMSowscW-RY1AAAA':
       Socket {
         nsp: [Circular],
         server: [Object],
         adapter: [Object],
         id: 'fuZShMSowscW-RY1AAAA',
         client: [Object],
         conn: [Object],
         rooms: [Object],
         acks: {},
         connected: true,
         disconnected: false,
         handshake: [Object],
         fns: [],
         flags: {},
         _rooms: [],
         user: 'fuZShMSowscW-RY1AAAA',
         _events: [Object],
         _eventsCount: 1 },
      UwnDj0SCaCNcRX7RAAAB:
       Socket {
         nsp: [Circular],
         server: [Object],
         adapter: [Object],
         id: 'UwnDj0SCaCNcRX7RAAAB',
         client: [Object],
         conn: [Object],
         rooms: [Object],
         acks: {},
         connected: true,
         disconnected: false,
         handshake: [Object],
         fns: [],
         flags: {},
         _rooms: [],
         user: 'Merek Smith',
         _events: [Object],
         _eventsCount: 1 },
      imxzCpF2akD6M4TlAAAC:
       Socket {
         nsp: [Circular],
         server: [Object],
         adapter: [Object],
         id: 'imxzCpF2akD6M4TlAAAC',
         client: [Object],
         conn: [Object],
         rooms: [Object],
         acks: {},
         connected: true,
         disconnected: false,
         handshake: [Object],
         fns: [],
         flags: {},
         _rooms: [],
         user: 'imxzCpF2akD6M4TlAAAC',
         _events: [Object],
         _eventsCount: 1 } },
   connected:
    { 'fuZShMSowscW-RY1AAAA':
       Socket {
         nsp: [Circular],
         server: [Object],
         adapter: [Object],
         id: 'fuZShMSowscW-RY1AAAA',
         client: [Object],
         conn: [Object],
         rooms: [Object],
         acks: {},
         connected: true,
         disconnected: false,
         handshake: [Object],
         fns: [],
         flags: {},
         _rooms: [],
         user: 'fuZShMSowscW-RY1AAAA',
         _events: [Object],
         _eventsCount: 1 },
      UwnDj0SCaCNcRX7RAAAB:
       Socket {
         nsp: [Circular],
         server: [Object],
         adapter: [Object],
         id: 'UwnDj0SCaCNcRX7RAAAB',
         client: [Object],
         conn: [Object],
         rooms: [Object],
         acks: {},
         connected: true,
         disconnected: false,
         handshake: [Object],
         fns: [],
         flags: {},
         _rooms: [],
         user: 'Merek Smith',
         _events: [Object],
         _eventsCount: 1 },
      imxzCpF2akD6M4TlAAAC:
       Socket {
         nsp: [Circular],
         server: [Object],
         adapter: [Object],
         id: 'imxzCpF2akD6M4TlAAAC',
         client: [Object],
         conn: [Object],
         rooms: [Object],
         acks: {},
         connected: true,
         disconnected: false,
         handshake: [Object],
         fns: [],
         flags: {},
         _rooms: [],
         user: 'imxzCpF2akD6M4TlAAAC',
         _events: [Object],
         _eventsCount: 1 } },
   fns: [],
   ids: 0,
   rooms: [ '1234' ],
   flags: {},
   adapter:
    Adapter {
      nsp: [Circular],
      rooms:
       { '1234': [Object],
         'fuZShMSowscW-RY1AAAA': [Object],
         UwnDj0SCaCNcRX7RAAAB: [Object],
         imxzCpF2akD6M4TlAAAC: [Object] },
      sids:
       { 'fuZShMSowscW-RY1AAAA': [Object],
         UwnDj0SCaCNcRX7RAAAB: [Object],
         imxzCpF2akD6M4TlAAAC: [Object] },
      encoder: Encoder {} },
   _events: { connection: [Function] },
   _eventsCount: 1 }